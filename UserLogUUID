from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid

# 1. Definição da Base Declarativa
Base = declarative_base()

# 2. Mixin para o campo UserLogUUID
class LogUUIDMixin:
    UserLogUUID = Column(String(36), nullable=False, unique=True, default=lambda: str(uuid.uuid4()))

# 3. Modelo ORM para a tabela 'cadastro'
class Cadastro(LogUUIDMixin, Base):
    __tablename__ = 'cadastro'

    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
    name = Column(String(50), nullable=False)
    email = Column(String(70), nullable=False)
    password = Column(String(10), nullable=False)
    gender = Column(Text)
    created_at = Column(DateTime, default=func.current_timestamp())
    update_at = Column(DateTime, default=func.current_timestamp(), onupdate=func.current_timestamp())
    status = Column(Text)

    def __repr__(self):
        return f"<Cadastro(id={self.id}, name='{self.name}', uuid='{self.UserLogUUID}')>"

# 4. Modelo ORM para a tabela 'quartos'
class Quarto(LogUUIDMixin, Base):
    __tablename__ = 'quartos'

    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
    name = Column(Text, nullable=False)
    description = Column(Text, nullable=False)
    price = Column(Text, nullable=False)
    created_at = Column(DateTime, default=func.current_timestamp())
    update_at = Column(DateTime, default=func.current_timestamp(), onupdate=func.current_timestamp())
    status = Column(Text)
    image = Column(Text)

    def __repr__(self):
        return f"<Quarto(id={self.id}, name='{self.name}', uuid='{self.UserLogUUID}')>"

# 5. Modelo ORM para a tabela 'ctrl_reserva'
class CtrlReserva(LogUUIDMixin, Base):
    __tablename__ = 'ctrl_reserva'

    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
    cpf = Column(Text, nullable=False)
    name = Column(Text, nullable=False)
    email = Column(Text, nullable=False)
    room = Column(Text, nullable=False)
    days = Column(Text, nullable=False)
    created_at = Column(DateTime, default=func.current_timestamp())
    updated_at = Column(DateTime, default=func.current_timestamp(), onupdate=func.current_timestamp())
    status = Column(Text)

    def __repr__(self):
        return f"<CtrlReserva(id={self.id}, cpf='{self.cpf}', uuid='{self.UserLogUUID}')>"

# 6. Modelo ORM para a tabela 'servicos'
class Servicos(LogUUIDMixin, Base):
    __tablename__ = 'servicos'

    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
    name = Column(Text, nullable=False)
    description = Column(Text, nullable=False)
    price = Column(Text, nullable=False)
    created_at = Column(DateTime, default=func.current_timestamp())
    updated_at = Column(DateTime, default=func.current_timestamp(), onupdate=func.current_timestamp())
    status = Column(Text)

    def __repr__(self):
        return f"<Servicos(id={self.id}, name='{self.name}', uuid='{self.UserLogUUID}')>"